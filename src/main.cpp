/*
 * SPDX-FileCopyrightText: 2024-2025 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: CC0-1.0
 */

#include <Arduino.h>
#include <esp_display_panel.hpp>
#include <lvgl.h>
#include "lvgl_v8_port.h"
#include "lv_conf.h"
#include <math.h>
#include "uart_protocol.h"
#include <Preferences.h>

#include <Wire.h>
#include <TCA9548.h>
#include <PCF8575.h>

// Include external components
#include "loading_screen.h"
#include "app_screens.h" // New: Includes AppState, extern vars, and screen creation functions

using namespace esp_panel::drivers;
using namespace esp_panel::board;

extern uint16_t button_state_cache;

// ---------- ANTI-TEARING CONFIGURATION (Based on ESP-BSP proven solutions) ----------
static const uint32_t TARGET_FPS = 30;
static const uint32_t FRAME_MS = 1000 / TARGET_FPS;

// Application states and variables (No longer static, accessible via extern in app_screens.h)
AppState current_state = STATE_LOADING;
uint32_t state_start_time = 0;
const uint32_t IDLE_TIMEOUT = 10000; // 10 seconds idle timeout
uint32_t last_interaction_time = 0;
Preferences preferences;

#define TCA_ADDR 0x70 // –∞–¥—Ä–µ—Å–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
#define PCF_ADDR 0x20 // –∞–¥—Ä–µ—Å–∞ PCF8575

// TCA9548 —Ç–∞ PCF8575 –±—É–¥—É—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤ setup() –∑ Wire1
TCA9548 *tca1 = nullptr;
PCF8575 *pcf = nullptr;
int pcf_channel = 0; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞–Ω–∞–ª, –Ω–∞ —è–∫–æ–º—É –∑–Ω–∞–π–¥–µ–Ω–æ PCF8575

// ========== UART SWITCH ===========
#define UART_USED 0
// ========== UART SWITCH ===========

HardwareSerial uart_serial(2);
#if UART_USED
UARTProtocol uart_protocol(&uart_serial);
#else
UARTProtocol uart_protocol(nullptr); // Dummy
#endif

// Screen dimensions (No longer static, accessible via extern in app_screens.h)
int32_t SCR_W = 800,
        SCR_H = 480;

// Note: UI objects (menu_buttons, back_button) are now extern and defined in app_screens.cpp.

// Forward declaration for the timer callback (remains here as it controls the core loop)
static void app_timer_cb(lv_timer_t *timer);

///
static void lv_color_to_hex6(lv_color_t c, char out[7]) // out: "RRGGBB"
{
    uint32_t xrgb = lv_color_to32(c); // XRGB8888 (alpha=0xFF)
    uint8_t r = (xrgb >> 16) & 0xFF;
    uint8_t g = (xrgb >> 8) & 0xFF;
    uint8_t b = (xrgb >> 0) & 0xFF;
    snprintf(out, 7, "%02X%02X%02X", r, g, b);
}
///

/**
 * @brief Main application timer for state management and continuous updates.
 */
static void app_timer_cb(lv_timer_t *timer)
{
    static uint32_t last_time = 0;
    uint32_t now = lv_tick_get();

    // 1. Check for idle timeout (return to loading screen if no interaction)
    if (current_state == STATE_MAIN_MENU)
    {
        // Serial.printf("[IDLE] now=%u, last=%u, diff=%u\n", now, last_interaction_time, now - last_interaction_time);

        if ((now - last_interaction_time) >= IDLE_TIMEOUT)
        {
            Serial.println("[–¢–ê–ô–ú-–ê–£–¢] –î–æ—Å—è–≥–Ω—É—Ç–æ —Ç–∞–π–º-–∞—É—Ç –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –µ–∫—Ä–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
            lvgl_port_lock(-1); // Lock for UI changes
            current_state = STATE_LOADING;
            state_start_time = now;
            // Uses app_screen_touch_cb from app_screens.h
            loading_screen_create(app_screen_touch_cb);
            lvgl_port_unlock(); // Unlock
            return;
        }
    }

    // 2. Run animation update if in loading state
    if (current_state == STATE_LOADING)
    {
        // Calculate delta time for FPS-independent animation
        float dt = (now - last_time) / 1000.0f;
        if (last_time == 0 || dt < 0.001f || dt > 0.1f)
            dt = 0.033f; // 30 FPS fallback

        lvgl_port_lock(-1); // Lock for UI changes
        loading_screen_update_animation(dt);
        lvgl_port_unlock(); // Unlock
    }
    // 3. Run trainer logic based on current state
    else
    {
        lvgl_port_lock(-1); // Lock for UI changes in trainers
        switch (current_state)
        {
        case STATE_ACCURACY_TRAINER:
            run_accuracy_trainer();
            break;
        case STATE_REACTION_TIME_TRIAL:
            run_time_trial();
            break;
        case STATE_REACTION_SURVIVAL:
            run_survival_time_trainer();
            break;
        case STATE_MEMORY_TRAINER:
            run_memory_trainer();
            break;
        case STATE_COORDINATION_TRAINER:
            run_coordination_trainer();
            break;
        default:
            // Menu states don't need continuous updates
            break;
        }
        lvgl_port_unlock(); // Unlock
    }

    if (tca1 != nullptr && pcf != nullptr)
    {
        tca1->selectChannel(pcf_channel); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫–∞–Ω–∞–ª
        
        // PCF –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è
        static uint32_t last_pcf_debug = 0;
        uint32_t now_pcf = lv_tick_get();
        
        button_state_cache = 0;
        for (uint8_t i = 0; i < 16; i++)
        {
            bool val = pcf->digitalRead(i);
            bitWrite(button_state_cache, i, val);
        }
        
        // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if ((now_pcf - last_pcf_debug) >= 2000)
        {
            Serial.printf("[PCF8575] –°—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ (–±—ñ—Ç–∏): ");
            for (int i = 15; i >= 0; i--)
            {
                Serial.print((button_state_cache & (1 << i)) ? "1" : "0");
            }
            Serial.printf(" (0x%04X)\n", button_state_cache);
            last_pcf_debug = now_pcf;
        }
    }
    else
    {
        // –Ø–∫—â–æ PCF –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        static uint32_t last_pcf_debug = 0;
        uint32_t now_pcf = lv_tick_get();
        
        if ((now_pcf - last_pcf_debug) >= 5000)
        {
            Serial.println("[PCF8575] ‚ùå PCF8575 –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
            last_pcf_debug = now_pcf;
        }
        button_state_cache = 0; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫
    }

    // 4. Handle UART communication with slave (LEDs and buttons)
    // ProtocolMessage msg;
    // if (uart_protocol.receiveMessage(msg))
    // {
    //     switch (msg.type)
    //     {
    //     case MSG_BUTTON_PRESSED:
    //         // Set the bit for the pressed button (param1 = button index)
    //         button_state_cache |= (1 << msg.param1);
    //         Serial.printf("[UART] Button %d pressed\n", msg.param1);
    //         break;
    //     case MSG_BUTTON_RELEASED:
    //         // Clear the bit for the released button (param1 = button index)
    //         button_state_cache &= ~(1 << msg.param1);
    //         Serial.printf("[UART] Button %d released\n", msg.param1);
    //         break;
    //     // Add other message types if needed (e.g., acknowledgments)
    //     default:
    //         break;
    //     }
    // }

    // Update debug label with current button states
    lvgl_port_lock(-1); // Lock for UI changes
    if (debug_label)
    {
        char buf[17];
        for (int i = 0; i < 16; i++)
        {
            buf[i] = (button_state_cache & (1 << i)) ? '1' : '0';
        }
        buf[16] = '\0';
        lv_label_set_text(debug_label, buf);
    }
    lvgl_port_unlock(); // Unlock

    last_time = now;
}

void setup()
{
    Serial.begin(115200);
    Serial.println("=== ESP32-S3 RGB LCD –°–∏—Å—Ç–µ–º–∞ –ë–µ–∑ –†–æ–∑—Ä–∏–≤—ñ–≤ ===");

    // –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞—Ç—É (—Ü–µ –Ω–∞–ª–∞—à—Ç—É—î I2C –¥—Ä–∞–π–≤–µ—Ä)
    Serial.println("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—ñ–≤...");
    Board *board = new Board();
    board->init();

#if UART_USED
    uart_serial.begin(115200, SERIAL_8N1, 44, 43);
#endif

// Configure anti-tearing RGB double-buffer mode (ESP-BSP style)
#if LVGL_PORT_AVOID_TEARING_MODE
    auto lcd = board->getLCD();

    Serial.println("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RGB –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤—ñ–≤...");
    lcd->configFrameBufferNumber(2); // RGB double-buffer mode

#if ESP_PANEL_DRIVERS_BUS_ENABLE_RGB && CONFIG_IDF_TARGET_ESP32S3
    auto lcd_bus = lcd->getBus();
    if (lcd_bus->getBasicAttributes().type == ESP_PANEL_BUS_TYPE_RGB)
    {
        Serial.println("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è RGB –±—É—Ñ–µ—Ä–∞ –≤—ñ–¥—Å–∫–æ–∫—É –¥–ª—è ESP32-S3...");
        int bounce_buffer_height = lcd->getFrameHeight() / 10;
        int bounce_buffer_size = lcd->getFrameWidth() * bounce_buffer_height;

        static_cast<BusRGB *>(lcd_bus)->configRGB_BounceBufferSize(bounce_buffer_size);

        Serial.printf("RGB –±—É—Ñ–µ—Ä –≤—ñ–¥—Å–∫–æ–∫—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: %dx%d –ø—ñ–∫—Å–µ–ª—ñ–≤\n",
                      lcd->getFrameWidth(), bounce_buffer_height);
    }
#endif
#endif

    assert(board->begin());
    Serial.println("–ü–ª–∞—Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ RGB –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—ñ–≤!");

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥—Ä—É–≥–∏–π I2C –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ü–Ü–°–õ–Ø ESP Panel
    Serial.println("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥—Ä—É–≥–æ–≥–æ I2C –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤...");
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ GPIO8/9 —Ç–µ–ø–µ—Ä, –∫–æ–ª–∏ touch –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π
    const int EXTERNAL_SDA_PIN = 8;
    const int EXTERNAL_SCL_PIN = 9;
    Wire1.begin(EXTERNAL_SDA_PIN, EXTERNAL_SCL_PIN); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Wire1 –∑–∞–º—ñ—Å—Ç—å Wire
    
    // I2C —Å–∫–∞–Ω–µ—Ä –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    Serial.printf("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö I2C –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –Ω–∞ GPIO%d(SDA)/GPIO%d(SCL)...\n", EXTERNAL_SDA_PIN, EXTERNAL_SCL_PIN);
    int found_devices = 0;
    for (byte address = 1; address < 127; address++)
    {
        Wire1.beginTransmission(address);
        byte error = Wire1.endTransmission();
        if (error == 0)
        {
            Serial.printf("‚úÖ I2C –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∞–¥—Ä–µ—Å—ñ 0x%02X\n", address);
            found_devices++;
        }
        else if (error == 4)
        {
            Serial.printf("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å—ñ 0x%02X\n", address);
        }
    }
    if (found_devices == 0)
    {
        Serial.printf("‚ùå –ó–æ–≤–Ω—ñ—à–Ω—ñ—Ö I2C –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ GPIO%d/GPIO%d!\n", EXTERNAL_SDA_PIN, EXTERNAL_SCL_PIN);
        Serial.println("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è TCA9548A —Ç–∞ PCF8575");
    }
    else
    {
        Serial.printf("üìä –ó–Ω–∞–π–¥–µ–Ω–æ %d –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö I2C –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤\n", found_devices);
    }
    // –°—Ç–≤–æ—Ä—é—î–º–æ TCA9548 –∑ Wire1
    tca1 = new TCA9548(TCA_ADDR, &Wire1); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Wire1
    
    if (!tca1->begin())
    {
        Serial.println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TCA9548A –Ω–∞ GPIO8/9!");
        Serial.println("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à—ñ –ø—ñ–Ω–∏");
        // –ù–µ –±–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ pcf —è–∫ nullptr
        delete tca1;
        tca1 = nullptr;
        pcf = nullptr;
    }
    else
    {
        Serial.println("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ TCA9548A –Ω–∞ GPIO8/9.");

        // –®—É–∫–∞—î–º–æ PCF8575 –Ω–∞ –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª–∞—Ö TCA9548A
        bool pcf_found = false;
        int pcf_channel = -1;
        
        for (int channel = 0; channel < 8; channel++)
        {
            Serial.printf("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É %d TCA9548A...\n", channel);
            tca1->selectChannel(channel);
            delay(10); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫–∞ –º–æ–∂–ª–∏–≤–∏—Ö –∞–¥—Ä–µ—Å PCF8575
            uint8_t pcf_addresses[] = {0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27};
            
            for (int addr_idx = 0; addr_idx < 8; addr_idx++)
            {
                uint8_t test_addr = pcf_addresses[addr_idx];
                Wire1.beginTransmission(test_addr);
                byte error = Wire1.endTransmission();
                
                if (error == 0)
                {
                    Serial.printf("ÔøΩ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –Ω–∞ –∫–∞–Ω–∞–ª—ñ %d, –∞–¥—Ä–µ—Å–∞ 0x%02X\n", channel, test_addr);
                    
                    // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —è–∫ PCF8575
                    PCF8575 *test_pcf = new PCF8575(&Wire1, test_addr);
                    if (test_pcf->begin())
                    {
                        Serial.printf("‚úÖ PCF8575 —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª—ñ %d, –∞–¥—Ä–µ—Å–∞ 0x%02X!\n", channel, test_addr);
                        pcf = test_pcf;
                        pcf_found = true;
                        pcf_channel = channel;
                        
                        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PCF8575 - –∑—á–∏—Ç—É—î–º–æ –≤—Å—ñ –ø—ñ–Ω–∏
                        Serial.print("üß™ –¢–µ—Å—Ç –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è PCF8575: ");
                        uint16_t test_val = 0;
                        for (uint8_t i = 0; i < 16; i++)
                        {
                            bool pin_val = pcf->digitalRead(i);
                            bitWrite(test_val, i, pin_val);
                        }
                        Serial.printf("0x%04X\n", test_val);
                        
                        // --- –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –ø—ñ–Ω–∏ —è–∫ INPUT_PULLUP ---
                        for (uint8_t i = 0; i < 16; i++)
                        {
                            pcf->pinMode(i, INPUT_PULLUP);
                        }
                        break;
                    }
                    else
                    {
                        delete test_pcf;
                    }
                }
            }
            
            if (pcf_found) break;
        }
        
        if (!pcf_found)
        {
            Serial.println("‚ùå PCF8575 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∂–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ TCA9548A!");
            Serial.println("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ—ñ–∑–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è PCF8575");
            pcf = nullptr;
        }
        else
        {
            Serial.printf("üìã PCF8575 –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ %d\n", pcf_channel);
        }
    }

    Serial.println("üìã –ì–æ—Ç–æ–≤–æ –¥–æ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫...\n");

    Serial.println("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LVGL –∑ –ø–æ–≤–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º...");
    // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ touch –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è I2C –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    lvgl_port_init(board->getLCD(), nullptr); // nullptr –∑–∞–º—ñ—Å—Ç—å board->getTouch()

    Serial.println("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—ñ–≤...");
    lvgl_port_lock(-1);

    // Get actual screen dimensions
    SCR_W = lv_disp_get_hor_res(NULL);
    SCR_H = lv_disp_get_ver_res(NULL);

    Serial.printf("–†–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω—É: %dx%d\n", SCR_W, SCR_H);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é LVGL
    Serial.printf("LVGL –∫–æ–ª—å–æ—Ä–æ–≤–∞ –≥–ª–∏–±–∏–Ω–∞: %d –±—ñ—Ç\n", LV_COLOR_DEPTH);
    
    // –¢–µ—Å—Ç—É—î–º–æ –∫–æ–ª—å–æ—Ä–∏
    lv_color_t test_red = lv_color_make(255, 0, 0);
    lv_color_t test_green = lv_color_make(0, 255, 0);
    lv_color_t test_blue = lv_color_make(0, 0, 255);
    
    Serial.printf("–¢–µ—Å—Ç –∫–æ–ª—å–æ—Ä—ñ–≤ - Red: 0x%04X, Green: 0x%04X, Blue: 0x%04X\n", 
                  lv_color_to16(test_red), lv_color_to16(test_green), lv_color_to16(test_blue));

    // Initialize orbit parameters using the new function
    loading_screen_init_params(SCR_W, SCR_H);

    // Initialize app state
    current_state = STATE_LOADING;
    state_start_time = lv_tick_get();
    last_interaction_time = state_start_time;

    Serial.println("[–ù–ê–õ–ê–ì–û–î–ñ–ï–ù–ù–Ø] –î–æ–¥–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ - –ó–∞–ø—É—Å–∫ –≤ —Å—Ç–∞–Ω—ñ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø");

    // Create initial loading screen using the new function
    loading_screen_create(app_screen_touch_cb);

    // Start application timer for state management and animation
    lv_timer_create(app_timer_cb, FRAME_MS, NULL);

    lvgl_port_unlock();

    Serial.println("=== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ë–ï–ó –†–û–ó–†–ò–í–Ü–í –ó–ê–í–ï–†–®–ï–ù–ê ===");
}

void loop()
{
    delay(5);
}
